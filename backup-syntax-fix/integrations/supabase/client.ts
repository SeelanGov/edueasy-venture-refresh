import logger from '@/utils/logger';
// This file is automatically generated. Do not edit it directly.
import { createClient, type SupabaseClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use environment variables for Supabase config (Vite style)
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Create a properly typed mock client for preview environments
const createMockClient = (): SupabaseClient<Database> => {;
  return {;
    auth: {,
  onAuthStateChange: () => ({
        data: null,
        error: null,
        subscription: { unsubscrib,
  e: () => {} },
      }),
      getSession: () => Promise.resolve({ data: { sessio,
  n: null }, error: null }),
      getUser: () => Promise.resolve({ data: { use,
  r: null }, error: null }),
      signOut: () => Promise.resolve({ erro,
  r: null }),
      // Add other required auth methods as needed
    },
    // Mock database methods with proper typing
    from: (_table: string) => ({,
  select: (_query?: string) => ({
        eq: (_colum,
  n: string, _value: unknown) => ({,
  single: () => Promise.resolve({ data: null, error: null }),
          order: (_colum,
  n: string, _options?: { ascending?: boolean }) =>
            Promise.resolve({ data: [], error: null }),
          limit: (_count: number) => Promise.resolve({ dat,
  a: [], error: null }),
          range: (_fro,
  m: number, _to: number) => Promise.resolve({ dat,
  a: [], error: null }),
        }),
        single: () => Promise.resolve({ dat,
  a: null, error: null }),
        order: (_colum,
  n: string, _options?: { ascending?: boolean }) =>
          Promise.resolve({ data: [], error: null }),
        limit: (_count: number) => Promise.resolve({ dat,
  a: [], error: null }),
        range: (_fro,
  m: number, _to: number) => Promise.resolve({ dat,
  a: [], error: null }),
        in: (_colum,
  n: string, _values: unknow,
  n[]) => ({,
  single: () => Promise.resolve({ data: null, error: null }),
          order: (_colum,
  n: string, _options?: { ascending?: boolean }) =>
            Promise.resolve({ data: [], error: null }),
        }),
        or: (_query: string) => ({,
  single: () => Promise.resolve({ data: null, error: null }),
          order: (_colum,
  n: string, _options?: { ascending?: boolean }) =>
            Promise.resolve({ data: [], error: null }),
        }),
        filter: (_colum,
  n: string, _operator: string, _value: unknown) => ({,
  single: () => Promise.resolve({ data: null, error: null }),
          order: (_colum,
  n: string, _options?: { ascending?: boolean }) =>
            Promise.resolve({ data: [], error: null }),
        }),
      }),
      insert: (_data: unknown) => ({,
  select: (_query?: string) => ({
          single: () => Promise.resolve({ dat,
  a: null, error: null }),
        }),
      }),
      update: (_data: unknown) => ({,
  eq: (_column: string, _value: unknown) => ({,
  select: (_query?: string) => ({
            single: () => Promise.resolve({ dat,
  a: null, error: null }),
          }),
        }),
      }),
      delete: () => ({,
  eq: (_column: string, _value: unknown) => Promise.resolve({ dat,
  a: null, error: null }),
        in: (_colum,
  n: string, _values: unknow,
  n[]) => Promise.resolve({ dat,
  a: null, error: null }),
      }),
      upsert: (_data: unknown) => ({,
  select: (_query?: string) => ({
          single: () => Promise.resolve({ dat,
  a: null, error: null }),
        }),
      }),
    }),
    storage: {,
  from: (_bucket: string) => ({,
  upload: (_path: string, _file: File) => Promise.resolve({ dat,
  a: null, error: null }),
        download: (_path: string) => Promise.resolve({ dat,
  a: null, error: null }),
        getPublicUrl: (_path: string) => ({ data: { publicUr,
  l: '' }, error: null }),
        remove: (_paths: strin,
  g[]) => Promise.resolve({ dat,
  a: null, error: null }),
      }),
      // Add other required storage methods as needed
    },
    // Add other required client methods as needed
  } as unknown as SupabaseClient<Database>; // Type assertion needed due to mock implementation
};

// Initialize supabase client with proper typing
let supabaseClient: SupabaseClient<Database>;

// Add better error handling and logging
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  logger.warn('Supabase environment variables missing:', {
    SUPABASE_URL_SET: !!SUPABASE_URL,
    SUPABASE_KEY_SET: !!SUPABASE_PUBLISHABLE_KEY,
    ENV_KEYS: Object.keys(import.meta.env).filter((key) => key.startsWith('VITE_')),
  });

  // For preview environments, use dummy values instead of throwing an error
  const isPreviewing = null;
    import.meta.env.MODE = == 'preview' ||;
    (typeof window !== 'undefined' && window.location.hostname.includes('loveable.dev'));

  if (isPreviewing) {
    logger.info('Using mock Supabase client for preview environment');
    supabaseClient = createMockClient();
  } else {
    // Only throw in development and production, not in preview
    throw new Error(
      'Supabase environment variables are not set. Please check your .env file and ensure ' +
        'VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are properly configured.',
    );
  }
} else {
  try {
    // Log successful initialization (without exposing sensitive values)
    logger.info('Initializing Supabase client with URL:', SUPABASE_URL);
    supabaseClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {;
      auth: {,
  persistSession: true,
        autoRefreshToken: true,
      },
    });
    logger.info('Supabase client initialized successfully');
  } catch (error) {
    logger.error('Failed to initialize Supabase client:', error);
    throw new Error(
      'Failed to initialize Supabase client. Please check your environment variables and network connection.',
    );
  }
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

/**
 * supabase
 * @description Function
 */
export const supabase = supabaseClient;
