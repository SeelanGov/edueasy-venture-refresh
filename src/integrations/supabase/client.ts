import { createClient, type SupabaseClient } from '@supabase/supabase-js';
import { type Database  } from './types';
import { getEnv } from '@/utils/env';
// This file is automatically generated. Do not edit it directly.

let _supabase: SupabaseClient<Database> | null = null;

// Create a properly typed mock client for preview environments
const createMockClient = (): SupabaseClient<Database> => {
  return {
    auth: {
      onAuthStateChange: () => ({
        data: null,
        error: null,
        subscription: { unsubscribe: () => {} },
      }),
      getSession: () => Promise.resolve({ data: { session: null }, error: null }),
      getUser: () => Promise.resolve({ data: { user: null }, error: null }),
      signOut: () => Promise.resolve({ error: null }),
      // Add other required auth methods as needed
    },
    // Mock database methods with proper typing
    from: (_table: string) => ({
      select: (_query?: string) => ({
        eq: (_column: string, _value: unknown) => ({
          single: () => Promise.resolve({ data: null, error: null }),
          order: (_column: string, _options?: { ascending?: boolean }) =>
            Promise.resolve({ data: [], error: null }),
          limit: (_count: number) => Promise.resolve({ data: [], error: null }),
          range: (_from: number, _to: number) => Promise.resolve({ data: [], error: null }),
        }),
        single: () => Promise.resolve({ data: null, error: null }),
        order: (_column: string, _options?: { ascending?: boolean }) =>
          Promise.resolve({ data: [], error: null }),
        limit: (_count: number) => Promise.resolve({ data: [], error: null }),
        range: (_from: number, _to: number) => Promise.resolve({ data: [], error: null }),
        in: (_column: string, _values: unknown[]) => ({
          single: () => Promise.resolve({ data: null, error: null }),
          order: (_column: string, _options?: { ascending?: boolean }) =>
            Promise.resolve({ data: [], error: null }),
        }),
        or: (_query: string) => ({
          single: () => Promise.resolve({ data: null, error: null }),
          order: (_column: string, _options?: { ascending?: boolean }) =>
            Promise.resolve({ data: [], error: null }),
        }),
        filter: (_column: string, _operator: string, _value: unknown) => ({
          single: () => Promise.resolve({ data: null, error: null }),
          order: (_column: string, _options?: { ascending?: boolean }) =>
            Promise.resolve({ data: [], error: null }),
        }),
      }),
      insert: (_data: unknown) => ({
        select: (_query?: string) => ({
          single: () => Promise.resolve({ data: null, error: null }),
        }),
      }),
      update: (_data: unknown) => ({
        eq: (_column: string, _value: unknown) => ({
          select: (_query?: string) => ({
            single: () => Promise.resolve({ data: null, error: null }),
          }),
        }),
      }),
      delete: () => ({
        eq: (_column: string, _value: unknown) => Promise.resolve({ data: null, error: null }),
        in: (_column: string, _values: unknown[]) => Promise.resolve({ data: null, error: null }),
      }),
      upsert: (_data: unknown) => ({
        select: (_query?: string) => ({
          single: () => Promise.resolve({ data: null, error: null }),
        }),
      }),
    }),
    storage: {
      from: (_bucket: string) => ({
        upload: (_path: string, _file: File) => Promise.resolve({ data: null, error: null }),
        download: (_path: string) => Promise.resolve({ data: null, error: null }),
        getPublicUrl: (_path: string) => ({ data: { publicUrl: '' }, error: null }),
        remove: (_paths: string[]) => Promise.resolve({ data: null, error: null }),
      }),
      // Add other required storage methods as needed
    },
    // Add other required client methods as needed
  } as unknown as SupabaseClient<Database>; // Type assertion needed due to mock implementation
};

export const getSupabase = (): SupabaseClient<Database> => {
  if (_supabase) return _supabase;

  // Hardcoded fallbacks for preview builds (remove when env vars are properly set)
  const url = getEnv('VITE_SUPABASE_URL') || 'https://pensvamtfjtpsaoeflbx.supabase.co';
  const key = getEnv('VITE_SUPABASE_ANON_KEY') || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBlbnN2YW10Zmp0cHNhb2VmbGJ4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM4MzcyOTcsImV4cCI6MjA1OTQxMzI5N30.ZGFT9bcxwFuDVRF7ZYtLTQDPP3LKmt5Yo8BsJAFQyPM';

  if (!url || !key) {
    console.warn('Supabase env vars missing: VITE_SUPABASE_URL / VITE_SUPABASE_ANON_KEY');
    throw new Error('SUPABASE_ENV_MISSING');
  }

  _supabase = createClient<Database>(url, key, {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
    },
  });
  return _supabase;
};

// For backward compatibility - lazy initialize on access
export const supabase = new Proxy({} as SupabaseClient<Database>, {
  get(target, prop) {
    const client = getSupabase();
    return client[prop as keyof SupabaseClient<Database>];
  }
});
